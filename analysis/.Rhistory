summary(pca.scaled0)
summary(pca.scaled)
summary(pca.unscaled)
View(testdata1)
pca.scaled$rotation
View(pca.scaled$rotation)
testdata2=testdata[,2:9]
testdata2=na.omit(testdata2)
pca2.scaled=prcomp(testdata2[,1:7],scale=TRUE)
View(pca2.scaled$rotation)
View(summary(pca.scaled))
summary(pca.scaled)
summary(pca2.scaled)
plot(pca.scaled,type="l",mian="pca1")
plot(pca.scaled.type="l",main="pca1")
plot(pca.scaled.type="l",main="pca1")
plot(pca.scaled,type="l",main="pca1")
plot(pca2.scaled,type="l",main="pca2")
pca2.unscaled=prcomp(testdata2[,1:7],scale=FALSE)
View(pca2.unscaled$rotation)
rm(list=list())
rm(list=List())
library(caret)
install.packages("caret")
save.image("~/.RData")
install.packages("e1071")
LOC = c(51,42,99,8)
PersonHours=(1,9,4,4)
df=data.frame(LOC,PersonHours)
str(df)
library(car) #For the VIF function
LOC = c(51,42,99,8)
PersonHours = c(1,9,4,4)
df = data.frame(LOC,PersonHours)
str(df)
library(tidyverse) #For ggplot2
library(GGally) #For scatter plot matrix
library(caret) #Classification and Regression Training package
mod.slr <- lm(formula=PersonHours~LOC, #PersonHours as a function of LOC
data=df)
summary(mod.slr)
mod.slr$coefficients %>% round(digits=3)
#De-comment to install the packages below
#install.packages(c("caret"))
library(caret) #Classification and Regression Training package
LOC = c(51,42,99,8)
PersonHours = c(1,9,4,4)
df = data.frame(LOC,PersonHours)
mod.slr <- lm(formula=PersonHours~LOC, #PersonHours as a function of LOC
data=df)
summary(mod.slr)
mod.slr$coefficients %>% round(digits=3)
library(tidyverse)
mod.slr$coefficients %>% round(digits=3)
mod.slr$coefficients
str(mod.slr$coefficients)
mod.slr$coefficients #coeeficients of the model (b and log a)
#install.packages(c("caret"))
library(caret) #Classification and Regression Training package
LOC = c(51,42,99,8)
PersonHours = c(1,9,4,4)
df = data.frame(LOC,PersonHours)
mod.slr <- lm(formula=PersonHours~LOC, #PersonHours as a function of LOC
data=df)
mod.slr$coefficients #coeeficients of the model (b and log a)
log(2.7)
LOC = c(log(51),log(42),log(99),log(8))
PersonHours = c(log(1),log(9),log(4),log(4))
df = data.frame(LOC,PersonHours)
mod.slr <- lm(formula=PersonHours~LOC, #PersonHours as a function of LOC
data=df)
mod.slr$coefficients #coeeficients of the model (b and log a)
getwd()
a <- "hello"
mpg
library(ggplot2)
mpg
a = as.data.frame(mpg)
b=2
y=sin(X)
x=seq(0, 2*pi, length=100)
y=sin(x)
plot(x,y)
grid()
plot(x,y,ylab="sin(x)")
grid()
example(data.frame)
c(0:10)
x=c(0:10, 50)
xm=mean(x)
c(xm, mean(x, trim=0.10))
x=c(1,2,2,4)
mean(x)
mean(X,trim=0.25)
mean(x,trim=0.25)
a + 1:10
1+ 1:10
plot(sin(seq(0,2*pi,length=100)))
custdata <- read.table('E:/22S2/Computational Data Analysis/W2 Basic R and GG plot/custdata.tsv',header=T, sep='\t')
library('ggplot2')
ggplot(custdata, aes(x=gas_usage)) + geom_histogram(binwidt=10, fill="blue")
ggplot(custdata, aes(x=gas_usage)) + geom_histogram(binwidth=10, fill="blue")
ggplot(custdata, aes(x=gas_usage)) + geom_histogram(binwidth=10, fill="blue")
custdata
head(custdata)
ggplot(data = custdata) +
geom_histogram(mapping = aes(x=age),
binwidth=5, fill="gray")
ggplot(data = custdata) +
geom_histogram(mapping = aes(x=age),
binwidth=5, fill="blue")
str(custdata)
custdata2 <- readRDS('E:/22S2/Computational Data Analysis/W2 Basic R and GG plot/custdata.RDS')
ggplot(custdata_v2, aes(x=gas_usage)) +
geom_histogram(binwidth=10, fill="blue")
ggplot(custdata2, aes(x=gas_usage)) +
geom_histogram(binwidth=10, fill="blue")
test=custdata2$gas_usage
test2=test>3
test2=c(test>3)
test2=c(test[test>3])
ggplot(data=test2) +
geom_histogram(binwidth=10, fill="blue")
ggplot(data=as.data.frame(test2)) +
geom_histogram(binwidth=10, fill="blue")
test2=as.data.frame(test2)
str(test2)
summary(test2)
hist(test2)
hist(x=test2)
hist(x = test2$test2)
ggplot(data=test2, aes(x=test2)) +
geom_histogram(binwidth=10, fill="blue")
income_stat <- boxplot.stats(custdata$income)$stats
income_stat_str <- paste(income_stat, collapse=" ")
library(scales)
fig <- ggplot(custdata) + geom_density(aes(x=income)) +
labs(y="density") +
scale_x_continuous(labels=dollar, breaks=c(35000,200000,400000)) +
annotate("text", x = 180000, y = 1e-05,
label = paste("Most of the distribution is concentrated",
"at the low end: less than $100,000 a year.", sep="\n")) +
annotate("text", x = 400000, y = 1.5e-06,
label = paste("Subpopulation of", "wealthy customers",
"in the $400,000 range.", sep="\n")) +
annotate("text", x = 550000, y = 1e-06,
label = paste("Wide data range", "may consider log scale.",
sep="\n")) +
annotate("text", x=350000, y = 1e-05, hjust=0,
label=paste("stats: ", income_stat_str, sep="\n"))
fig
income_stat
class(income_stat)
fig <- ggplot(custdata) + geom_density(aes(x=income)) +
labs(y="density") +
scale_x_continuous(labels=dollar, breaks=c(35000,200000,400000)) +
annotate("text", x = 180000, y = 1e-05,
label = "Most of the distribution is concentrated\nat the low end: less than $100,000 a year.") +
annotate("text", x = 400000, y = 1.5e-06,
label = paste("Subpopulation of", "wealthy customers",
"in the $400,000 range.", sep="\n")) +
annotate("text", x = 550000, y = 1e-06,
label = paste("Wide data range", "may consider log scale.",
sep="\n")) +
annotate("text", x=350000, y = 1e-05, hjust=0,
label=paste("stats: ", income_stat_str, sep="\n"))
fig
ggplot(custdata_v1) + geom_density(aes(x=income)) +
scale_x_log10(breaks=c(100,1000,10000,35000,200000),labels=dollar) +
annotation_logticks(sides="bt") + theme(text = element_text(size = 18))
ggplot(custdata) + geom_density(aes(x=income)) +
scale_x_log10(breaks=c(100,1000,10000,35000,200000),labels=dollar) +
annotation_logticks(sides="bt") + theme(text = element_text(size = 18))
boxplot(custdata$age, notch=TRUE, col="gold")
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=16, outlier.size=2, notch=FALSE)
boxplot.stats(custdata$age)$stats
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=12, outlier.size=2, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=15, outlier.size=5, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=11, outlier.size=4, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=5, outlier.size=4, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=1, outlier.size=4, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=2, outlier.size=4, notch=FALSE)
ggplot(custdata) +
geom_boxplot(aes(y=age), outlier.colour="red",
outlier.shape=3, outlier.size=4, notch=FALSE)
?table
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
test
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < 4)) stop("no repeated records")
else {
ind <- sapply(stand.col, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE))
}
return(x[ind, ])
}
mytest_B<-deleteuniquelines(test)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < 4)) stop("no repeated records")
else {
ind <- sapply(stand.col, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE))
}
return(x[ind, ])
}
mytest_B<-deleteuniquelines(test)
cat(mytest_B)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < 4)) stop("no repeated records")
else {
ind <- sapply(stand.col, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE))
}
return(x[ind, ])
}
mytest_B<-deleteuniquelines(test)
print(mytest_B)
test$salary
table(test$salary)
all(count<40)
all(table(test$salary))
all(table(test$salary)<4)
all(table(test$salary)<5)
sapply(x$salary, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE))
sapply(test$salary, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE))
sapply(test$salary, function(t) ifelse(table(test$salary)[as.character(t)] > 1, TRUE, FALSE))
a = sapply(test$salary, function(t) ifelse(table(test$salary)[as.character(t)] > 1, TRUE, FALSE))
str(a)
summary(a)
typeof(a)
x[a,]
test$salary[ind,]
test$salary[a,]
a[1]
a[1,1]
dim(a)
a
str(a)
colnames(a)
summary(a)
attributes(a)
str(a)
typeof(A)
typeof(a)
as.data.frame(a)
as.vector(a)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < 4)) stop("no repeated records")
else {
ind <- as.vector(sapply(stand.col, function(t) ifelse(count[as.character(t)] > 1, TRUE, FALSE)))
# ind:
# 1000  1000  1000  2000  2000  2000  3000  3000  1000   500 10000
# TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
}
return(x[ind, ])
}
mytest_B<-deleteuniquelines(test)
print(mytest_B)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x, i) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < i)){
return(x)
}
else {
ind <- as.vector(sapply(stand.col, function(t) ifelse(count[as.character(t)] < i, TRUE, FALSE)))
return(x[ind, ])
}
}
mytest_B<-deleteuniquelines(test, 2)
print(mytest_B)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x, i) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < i)){
return(x)
}
else {
ind <- as.vector(sapply(stand.col, function(t) ifelse(count[as.character(t)] >= i, TRUE, FALSE)))
return(x[ind, ])
}
}
mytest_B<-deleteuniquelines(test, 2)
print(mytest_B)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x, i) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < i)){
return(x)
}
else {
ind <- as.vector(sapply(stand.col, function(t) ifelse(count[as.character(t)] >= i, TRUE, FALSE)))
return(x[ind, ])
}
}
mytest_B<-deleteuniquelines(test, 3)
print(mytest_B)
test = data.frame(name = c("A", "B","C","D","E","F","G","H","I","G","K"),id = c("001","002","003","004","005","006","007","008","009","010","011"),salary = c(1000, 1000,1000,2000,2000,2000,3000,3000,1000,500,10000) )
deleteuniquelines <- function(x, i) {
stand.col <- x$salary
count <- table(stand.col)
if (all(count < i)){
return(x)
}
else {
ind <- as.vector(sapply(stand.col, function(t) ifelse(count[as.character(t)] >= i, TRUE, FALSE)))
return(x[ind, ])
}
}
mytest_B<-deleteuniquelines(test, 4)
print(mytest_B)
getwd()
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/)
""
)
)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/")
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/analysis")
save.image("D:/A-SOUL/ZJStatistics/editing.RData")
df <- read.csv("../data/stream_video.csv",header=T)
df
df[1]
df[,1]
df[1,]
df[1,] <- c(time="2000-01-01",
title="Test",
type="xv",
length=114514,
member="XABCE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="XABCE",
link="www.bilibili.com/",
other="",
creator='uid:3510653')
df
df[1,] <- c(time="2020-11-23",
title="B站2020-11-23乐华娱乐年度企划A-SOUL来啦！敬请期待！~",
type="bv",
length=36,
member="ABCDE",
nSongA=0,lenSongA=0,nDanceA=1,lenDanceA=36,
nSongB=0,lenSongB=0,nDanceB=1,lenDanceB=36,
nSongC=0,lenSongC=0,nDanceC=1,lenDanceC=36,
nSongD=0,lenSongD=0,nDanceD=1,lenDanceD=36,
nSongE=0,lenSongE=0,nDanceE=1,lenDanceE=36,
source="X",
link="www.bilibili.com/video/BV1my4y167r7",
other="",
creator='uid:3510653')
df
df <- df %>% add_row(time="2020-11-27",
title="【3D模型展示】A-SOUL大家的常服~",
type="bv",
length=28,
member="XABCDE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="X",
link="www.bilibili.com/video/BV1ja4y1W7jp",
other="",
creator='uid:3510653')
library(tidyverse)
library(tidyverse)
df <- df %>% add_row(time="2020-11-27",
title="【3D模型展示】A-SOUL大家的常服~",
type="bv",
length=28,
member="XABCDE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="X",
link="www.bilibili.com/video/BV1ja4y1W7jp",
other="",
creator='uid:3510653')
str(df)
df <- read.csv("../data/stream_video.csv",header=T)
df
str(df)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/data")
df <- data.frame(time=character(),title=character(),type=character(),length=numeric(),member=character(),
nSongA=numeric(),lenSongA=numeric(),nDanceA=numeric(),lenDanceA=numeric(),
nSongB=numeric(),lenSongB=numeric(),nDanceB=numeric(),lenDanceB=numeric(),
nSongC=numeric(),lenSongC=numeric(),nDanceC=numeric(),lenDanceC=numeric(),
nSongD=numeric(),lenSongD=numeric(),nDanceD=numeric(),lenDanceD=numeric(),
nSongE=numeric(),lenSongE=numeric(),nDanceE=numeric(),lenDanceE=numeric(),
source=character(),link=character(),other=character(),creator=character())
# add a sample row for automatic type recoginition
# add row
df <- df %>% add_row(time="2000-01-01",
title="Test",
type="xv",
length=114514,
member="XABCE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="XABCE",
link="www.bilibili.com/",
other="",
creator='uid:3510653')
write.csv(df,"./stream_video.csv", row.names = FALSE)
library(tidyverse)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/analysis")
df <- read.csv("../data/stream_video.csv",header=T)
str(df)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/data")
df <- data.frame(time=character(),title=character(),type=character(),length=numeric(),member=character(),
nSongA=numeric(),lenSongA=numeric(),nDanceA=numeric(),lenDanceA=numeric(),
nSongB=numeric(),lenSongB=numeric(),nDanceB=numeric(),lenDanceB=numeric(),
nSongC=numeric(),lenSongC=numeric(),nDanceC=numeric(),lenDanceC=numeric(),
nSongD=numeric(),lenSongD=numeric(),nDanceD=numeric(),lenDanceD=numeric(),
nSongE=numeric(),lenSongE=numeric(),nDanceE=numeric(),lenDanceE=numeric(),
source=character(),link=character(),other=character(),creator=character())
# add a sample row for automatic type recoginition
# add row
df <- df %>% add_row(time="2000-01-01",
title="Test",
type="xv",
length=114514,
member="XABCE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="XABCE",
link="www.bilibili.com/",
other="null",
creator='uid:3510653')
write.csv(df,"./stream_video.csv", row.names = FALSE)
library(tidyverse)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/analysis")
df <- read.csv("../data/stream_video.csv",header=T)
df
df <- df %>% add_row(time="2020-11-23",
title="B站2020-11-23乐华娱乐年度企划A-SOUL来啦！敬请期待！~",
type="bv",
length=36,
member="ABCDE",
nSongA=0,lenSongA=0,nDanceA=1,lenDanceA=36,
nSongB=0,lenSongB=0,nDanceB=1,lenDanceB=36,
nSongC=0,lenSongC=0,nDanceC=1,lenDanceC=36,
nSongD=0,lenSongD=0,nDanceD=1,lenDanceD=36,
nSongE=0,lenSongE=0,nDanceE=1,lenDanceE=36,
source="X",
link="www.bilibili.com/video/BV1my4y167r7",
other="",
creator='uid:3510653')
str(df)
df
View(df)
df <- df %>% add_row(time="2020-11-27",
title="【3D模型展示】A-SOUL大家的常服~",
type="bv",
length=28,
member="XABCDE",
nSongA=0,lenSongA=0,nDanceA=0,lenDanceA=0,
nSongB=0,lenSongB=0,nDanceB=0,lenDanceB=0,
nSongC=0,lenSongC=0,nDanceC=0,lenDanceC=0,
nSongD=0,lenSongD=0,nDanceD=0,lenDanceD=0,
nSongE=0,lenSongE=0,nDanceE=0,lenDanceE=0,
source="X",
link="www.bilibili.com/video/BV1ja4y1W7jp",
other="",
creator='uid:3510653')
str(df)
df <- df[-1,]
str(df)
write.csv(df,"../data/stream_video.csv",row.names=FALSE)
df <- read.csv("../data/stream_video.csv",header=T)
df
View(df)
setwd("D:/A-SOUL/ZJStatistics/ZJStatistics/analysis")
save.image("D:/A-SOUL/ZJStatistics/ZJStatistics/analysis/Notebook 1 Nov 2020.RData")
